/** Declaration file generated by dts-gen */

export const version: string;

export function ElMessage(opts: any): any;

export function ElMessageBox(options: any): any;

export function ElNotification(options: any): any;

export function install(app: any, opt: any): void;

export function locale(l: any): void;

export namespace ElAffix {
    const emits: string[];

    const name: string;

    const props: {
        offset: {
            default: number;
            type: any;
        };
        position: {
            default: string;
            type: any;
        };
        target: {
            default: string;
            type: any;
        };
        zIndex: {
            default: number;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElAlert {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class center {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class showIcon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace closable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace closeText {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace description {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace effect {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(value: any): void;

        }

        namespace title {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElAside {
    const name: string;

    const props: {
        width: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElAutocomplete {
    const components: {
        ElInput: {
            emits: string[];
            inheritAttrs: boolean;
            install: any;
            name: string;
            props: {
                autocomplete: {
                    default: string;
                    type: any;
                    validator: any;
                };
                autosize: {
                    default: boolean;
                    type: any[];
                };
                clearable: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                form: {
                    default: string;
                    type: any;
                };
                label: {
                    type: any;
                };
                modelValue: {
                    default: string;
                    type: any[];
                };
                placeholder: {
                    type: any;
                };
                prefixIcon: {
                    default: string;
                    type: any;
                };
                readonly: {
                    default: boolean;
                    type: any;
                };
                resize: {
                    type: any;
                    validator: any;
                };
                showPassword: {
                    default: boolean;
                    type: any;
                };
                showWordLimit: {
                    default: boolean;
                    type: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                suffixIcon: {
                    default: string;
                    type: any;
                };
                tabindex: {
                    type: any;
                };
                type: {
                    default: string;
                    type: any;
                };
                validateEvent: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElScrollbar: {
            components: {
                Bar: {
                    name: string;
                    props: {
                        move: any;
                        size: any;
                        vertical: any;
                    };
                    render: any;
                    setup: any;
                };
            };
            install: any;
            name: string;
            props: {
                native: {
                    default: boolean;
                    type: any;
                };
                noresize: any;
                tag: {
                    default: string;
                    type: any;
                };
                viewClass: {
                    default: string;
                    type: any[];
                };
                viewStyle: {
                    default: string;
                    type: any[];
                };
                wrapClass: {
                    default: string;
                    type: any[];
                };
                wrapStyle: {
                    default: string;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
    };

    const directives: {
        clickoutside: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const emits: string[];

    const inheritAttrs: boolean;

    const name: string;

    const props: {
        debounce: {
            default: number;
            type: any;
        };
        fetchSuggestions: {
            default: any;
            type: any;
        };
        hideLoading: {
            default: boolean;
            type: any;
        };
        highlightFirstItem: {
            default: boolean;
            type: any;
        };
        modelValue: {
            default: string;
            type: any[];
        };
        placement: {
            default: string;
            type: any;
            validator: any;
        };
        popperAppendToBody: {
            default: boolean;
            type: any;
        };
        popperClass: {
            default: string;
            type: any;
        };
        selectWhenUnmatched: {
            default: boolean;
            type: any;
        };
        triggerOnFocus: {
            default: boolean;
            type: any;
        };
        valueKey: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElAvatar {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class alt {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class src {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class srcSet {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace fit {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace shape {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(...args: any[]): void;

        }

        namespace size {
            const type: any[];

            function validator(...args: any[]): void;

        }

    }

}

export namespace ElBacktop {
    const emits: string[];

    const name: string;

    const props: {
        bottom: {
            default: number;
            type: any;
        };
        right: {
            default: number;
            type: any;
        };
        target: {
            default: string;
            type: any;
        };
        visibilityHeight: {
            default: number;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElBadge {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class hidden {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class isDot {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const value: {
            default: string;
            type: any[];
        };

        namespace max {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): any;

        }

    }

}

export namespace ElBreadcrumb {
    const name: string;

    const props: {
        separator: {
            default: string;
            type: any;
        };
        separatorClass: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElBreadcrumbItem {
    const name: string;

    const props: {
        replace: {
            default: boolean;
            type: any;
        };
        to: {
            default: string;
            type: any[];
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElButton {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class autofocus {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class circle {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class loading {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class plain {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class round {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace icon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace nativeType {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): any;

        }

    }

}

export namespace ElButtonGroup {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElCalendar {
    const components: {
        DateTable: {
            emits: string[];
            props: {
                date: {
                    type: any;
                };
                hideHeader: {
                    type: any;
                };
                range: {
                    type: any;
                };
                selectedDay: {
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElButton: {
            emits: string[];
            install: any;
            name: string;
            props: {
                autofocus: any;
                circle: any;
                disabled: any;
                icon: {
                    default: string;
                    type: any;
                };
                loading: any;
                nativeType: {
                    default: string;
                    type: any;
                    validator: any;
                };
                plain: any;
                round: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                    validator: any;
                };
            };
            render: any;
            setup: any;
        };
        ElButtonGroup: {
            install: any;
            name: string;
            render: any;
        };
    };

    const emits: string[];

    const name: string;

    const props: {
        modelValue: {
            type: any;
        };
        range: {
            type: any;
            validator: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElCard {
    const name: string;

    const props: {
        bodyStyle: {
            default: string;
            type: any[];
        };
        header: {
            default: string;
            type: any;
        };
        shadow: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElCarousel {
    const emits: string[];

    const name: string;

    const props: {
        arrow: {
            default: string;
            type: any;
        };
        autoplay: {
            default: boolean;
            type: any;
        };
        direction: {
            default: string;
            type: any;
            validator: any;
        };
        height: {
            default: string;
            type: any;
        };
        indicator: {
            default: boolean;
            type: any;
        };
        indicatorPosition: {
            default: string;
            type: any;
        };
        initialIndex: {
            default: number;
            type: any;
        };
        interval: {
            default: number;
            type: any;
        };
        loop: {
            default: boolean;
            type: any;
        };
        pauseOnHover: {
            default: boolean;
            type: any;
        };
        trigger: {
            default: string;
            type: any;
        };
        type: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElCarouselItem {
    const name: string;

    const props: {
        label: {
            default: string;
            type: any[];
        };
        name: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElCascader {
    const components: {
        ElCascaderPanel: {
            components: {
                ElCascaderMenu: {
                    components: {
                        ElCascaderNode: {
                            components: {
                                ElCheckbox: {
                                    emits: string[];
                                    install: any;
                                    name: string;
                                    props: {
                                        border: any;
                                        checked: any;
                                        controls: {
                                            default: any;
                                            type: any;
                                        };
                                        disabled: any;
                                        falseLabel: {
                                            default: any;
                                            type: any[];
                                        };
                                        id: {
                                            default: any;
                                            type: any;
                                        };
                                        indeterminate: any;
                                        label: {
                                            type: any[];
                                        };
                                        modelValue: {
                                            default: any;
                                            type: any[];
                                        };
                                        name: {
                                            default: any;
                                            type: any;
                                        };
                                        size: {
                                            type: any;
                                            validator: any;
                                        };
                                        trueLabel: {
                                            default: any;
                                            type: any[];
                                        };
                                    };
                                    render: any;
                                    setup: any;
                                };
                                ElRadio: {
                                    componentName: string;
                                    emits: string[];
                                    install: any;
                                    name: string;
                                    props: {
                                        border: any;
                                        disabled: any;
                                        label: {
                                            default: string;
                                            type: any[];
                                        };
                                        modelValue: {
                                            default: string;
                                            type: any[];
                                        };
                                        name: {
                                            default: string;
                                            type: any;
                                        };
                                        size: {
                                            type: any;
                                            validator: any;
                                        };
                                    };
                                    render: any;
                                    setup: any;
                                };
                                NodeContent: {
                                    render: any;
                                };
                            };
                            emits: string[];
                            name: string;
                            props: {
                                menuId: any;
                                node: {
                                    required: boolean;
                                    type: any;
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        ElScrollbar: {
                            components: {
                                Bar: {
                                    name: string;
                                    props: {
                                        move: any;
                                        size: any;
                                        vertical: any;
                                    };
                                    render: any;
                                    setup: any;
                                };
                            };
                            install: any;
                            name: string;
                            props: {
                                native: {
                                    default: boolean;
                                    type: any;
                                };
                                noresize: any;
                                tag: {
                                    default: string;
                                    type: any;
                                };
                                viewClass: {
                                    default: string;
                                    type: any[];
                                };
                                viewStyle: {
                                    default: string;
                                    type: any[];
                                };
                                wrapClass: {
                                    default: string;
                                    type: any[];
                                };
                                wrapStyle: {
                                    default: string;
                                    type: any[];
                                };
                            };
                            render: any;
                            setup: any;
                        };
                    };
                    name: string;
                    props: {
                        index: {
                            required: boolean;
                            type: any;
                        };
                        nodes: {
                            required: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            emits: string[];
            install: any;
            name: string;
            props: {
                border: {
                    default: boolean;
                    type: any;
                };
                modelValue: any[];
                options: {
                    default: any;
                    type: any;
                };
                props: {
                    default: any;
                    type: any;
                };
                renderLabel: any;
            };
            render: any;
            setup: any;
        };
        ElInput: {
            emits: string[];
            inheritAttrs: boolean;
            install: any;
            name: string;
            props: {
                autocomplete: {
                    default: string;
                    type: any;
                    validator: any;
                };
                autosize: {
                    default: boolean;
                    type: any[];
                };
                clearable: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                form: {
                    default: string;
                    type: any;
                };
                label: {
                    type: any;
                };
                modelValue: {
                    default: string;
                    type: any[];
                };
                placeholder: {
                    type: any;
                };
                prefixIcon: {
                    default: string;
                    type: any;
                };
                readonly: {
                    default: boolean;
                    type: any;
                };
                resize: {
                    type: any;
                    validator: any;
                };
                showPassword: {
                    default: boolean;
                    type: any;
                };
                showWordLimit: {
                    default: boolean;
                    type: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                suffixIcon: {
                    default: string;
                    type: any;
                };
                tabindex: {
                    type: any;
                };
                type: {
                    default: string;
                    type: any;
                };
                validateEvent: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElScrollbar: {
            components: {
                Bar: {
                    name: string;
                    props: {
                        move: any;
                        size: any;
                        vertical: any;
                    };
                    render: any;
                    setup: any;
                };
            };
            install: any;
            name: string;
            props: {
                native: {
                    default: boolean;
                    type: any;
                };
                noresize: any;
                tag: {
                    default: string;
                    type: any;
                };
                viewClass: {
                    default: string;
                    type: any[];
                };
                viewStyle: {
                    default: string;
                    type: any[];
                };
                wrapClass: {
                    default: string;
                    type: any[];
                };
                wrapStyle: {
                    default: string;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
        ElTag: {
            emits: string[];
            install: any;
            name: string;
            props: {
                closable: any;
                color: {
                    default: string;
                    type: any;
                };
                disableTransitions: any;
                effect: {
                    default: string;
                    type: any;
                    validator: any;
                };
                hit: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const directives: {
        Clickoutside: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class clearable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class collapseTags {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class filterable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const modelValue: any[];

        namespace beforeFilter {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace debounce {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace filterMethod {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace options {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace placeholder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace props {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace separator {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace showAllLevels {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

    }

}

export namespace ElCascaderPanel {
    const components: {
        ElCascaderMenu: {
            components: {
                ElCascaderNode: {
                    components: {
                        ElCheckbox: {
                            emits: string[];
                            install: any;
                            name: string;
                            props: {
                                border: any;
                                checked: any;
                                controls: {
                                    default: any;
                                    type: any;
                                };
                                disabled: any;
                                falseLabel: {
                                    default: any;
                                    type: any[];
                                };
                                id: {
                                    default: any;
                                    type: any;
                                };
                                indeterminate: any;
                                label: {
                                    type: any[];
                                };
                                modelValue: {
                                    default: any;
                                    type: any[];
                                };
                                name: {
                                    default: any;
                                    type: any;
                                };
                                size: {
                                    type: any;
                                    validator: any;
                                };
                                trueLabel: {
                                    default: any;
                                    type: any[];
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        ElRadio: {
                            componentName: string;
                            emits: string[];
                            install: any;
                            name: string;
                            props: {
                                border: any;
                                disabled: any;
                                label: {
                                    default: string;
                                    type: any[];
                                };
                                modelValue: {
                                    default: string;
                                    type: any[];
                                };
                                name: {
                                    default: string;
                                    type: any;
                                };
                                size: {
                                    type: any;
                                    validator: any;
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        NodeContent: {
                            render: any;
                        };
                    };
                    emits: string[];
                    name: string;
                    props: {
                        menuId: any;
                        node: {
                            required: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElScrollbar: {
                    components: {
                        Bar: {
                            name: string;
                            props: {
                                move: any;
                                size: any;
                                vertical: any;
                            };
                            render: any;
                            setup: any;
                        };
                    };
                    install: any;
                    name: string;
                    props: {
                        native: {
                            default: boolean;
                            type: any;
                        };
                        noresize: any;
                        tag: {
                            default: string;
                            type: any;
                        };
                        viewClass: {
                            default: string;
                            type: any[];
                        };
                        viewStyle: {
                            default: string;
                            type: any[];
                        };
                        wrapClass: {
                            default: string;
                            type: any[];
                        };
                        wrapStyle: {
                            default: string;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            name: string;
            props: {
                index: {
                    required: boolean;
                    type: any;
                };
                nodes: {
                    required: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class renderLabel {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        const modelValue: any[];

        namespace border {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace options {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace props {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

    }

}

export namespace ElCheckbox {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class border {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class checked {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class indeterminate {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const falseLabel: {
            default: any;
            type: any[];
        };

        const label: {
            type: any[];
        };

        const trueLabel: {
            default: any;
            type: any[];
        };

        namespace controls {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace id {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace modelValue {
            const type: any[];

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

    }

}

export namespace ElCheckboxButton {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class checked {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class indeterminate {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const falseLabel: {
            default: any;
            type: any[];
        };

        const label: {
            type: any[];
        };

        const trueLabel: {
            default: any;
            type: any[];
        };

        namespace modelValue {
            const type: any[];

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElCheckboxGroup {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace fill {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace max {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace min {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace modelValue {
            const type: any[];

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace textColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElCol {
    const name: string;

    const props: {
        lg: {
            default: any;
            type: any[];
        };
        md: {
            default: any;
            type: any[];
        };
        offset: {
            default: number;
            type: any;
        };
        pull: {
            default: number;
            type: any;
        };
        push: {
            default: number;
            type: any;
        };
        sm: {
            default: any;
            type: any[];
        };
        span: {
            default: number;
            type: any;
        };
        tag: {
            default: string;
            type: any;
        };
        xl: {
            default: any;
            type: any[];
        };
        xs: {
            default: any;
            type: any[];
        };
    };

    function install(app: any): void;

    function setup(...args: any[]): void;

}

export namespace ElCollapse {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class accordion {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace modelValue {
            const type: any[];

        }

    }

}

export namespace ElCollapseItem {
    const components: {
        ElCollapseTransition: {
            install: any;
            name: string;
            render: any;
            setup: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace name {
            const type: any[];

        }

        namespace title {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElCollapseTransition {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElColorPicker {
    const components: {
        AlphaSlider: {
            name: string;
            props: {
                color: {
                    required: boolean;
                    type: any;
                };
                vertical: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElButton: {
            emits: string[];
            install: any;
            name: string;
            props: {
                autofocus: any;
                circle: any;
                disabled: any;
                icon: {
                    default: string;
                    type: any;
                };
                loading: any;
                nativeType: {
                    default: string;
                    type: any;
                    validator: any;
                };
                plain: any;
                round: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                    validator: any;
                };
            };
            render: any;
            setup: any;
        };
        ElInput: {
            emits: string[];
            inheritAttrs: boolean;
            install: any;
            name: string;
            props: {
                autocomplete: {
                    default: string;
                    type: any;
                    validator: any;
                };
                autosize: {
                    default: boolean;
                    type: any[];
                };
                clearable: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                form: {
                    default: string;
                    type: any;
                };
                label: {
                    type: any;
                };
                modelValue: {
                    default: string;
                    type: any[];
                };
                placeholder: {
                    type: any;
                };
                prefixIcon: {
                    default: string;
                    type: any;
                };
                readonly: {
                    default: boolean;
                    type: any;
                };
                resize: {
                    type: any;
                    validator: any;
                };
                showPassword: {
                    default: boolean;
                    type: any;
                };
                showWordLimit: {
                    default: boolean;
                    type: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                suffixIcon: {
                    default: string;
                    type: any;
                };
                tabindex: {
                    type: any;
                };
                type: {
                    default: string;
                    type: any;
                };
                validateEvent: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        HueSlider: {
            name: string;
            props: {
                color: {
                    required: boolean;
                    type: any;
                };
                vertical: any;
            };
            render: any;
            setup: any;
        };
        Predefine: {
            props: {
                color: {
                    required: boolean;
                    type: any;
                };
                colors: {
                    required: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        SvPanel: {
            name: string;
            props: {
                color: {
                    required: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const directives: {
        ClickOutside: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class colorFormat {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class modelValue {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class popperClass {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class predefine {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class showAlpha {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

    }

}

export namespace ElContainer {
    const name: string;

    const props: {
        direction: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElDatePicker {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function setup(...args: any[]): void;

    namespace props {
        class endPlaceholder {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class startPlaceholder {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class unlinkPanels {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const defaultTime: {
            type: any[];
        };

        const defaultValue: {
            type: any[];
        };

        const modelValue: {
            default: string;
            type: any[];
        };

        const name: {
            default: string;
            type: any[];
        };

        namespace arrowControl {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace cellClassName {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace clearIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace clearable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace disabledDate {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace disabledHours {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace disabledMinutes {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace disabledSeconds {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace editable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace format {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace isRange {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace placeholder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace prefixIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace rangeSeparator {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace readonly {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace shortcuts {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace validateEvent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElDialog {
    const components: {
        "el-overlay": {
            emits: string[];
            name: string;
            props: {
                mask: {
                    default: boolean;
                    type: any;
                };
                overlayClass: {
                    type: any[];
                };
                zIndex: {
                    type: any;
                };
            };
            setup: any;
        };
    };

    const directives: {
        TrapFocus: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class modalClass {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace appendToBody {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace beforeClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace center {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace closeDelay {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace closeOnClickModal {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace closeOnPressEscape {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace customClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace destroyOnClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace fullscreen {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace lockScroll {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace modal {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace modelValue {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const required: boolean;

        }

        namespace openDelay {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace showClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace title {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace top {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace width {
            const type: any[];

            function validator(val: any): any;

        }

        namespace zIndex {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

    }

}

export namespace ElDivider {
    const name: string;

    const props: {
        contentPosition: {
            default: string;
            type: any;
            validator: any;
        };
        direction: {
            default: string;
            type: any;
            validator: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElDrawer {
    const components: {
        ElOverlay: {
            emits: string[];
            name: string;
            props: {
                mask: {
                    default: boolean;
                    type: any;
                };
                overlayClass: {
                    type: any[];
                };
                zIndex: {
                    type: any;
                };
            };
            setup: any;
        };
    };

    const directives: {
        TrapFocus: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class beforeClose {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class modalClass {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class zIndex {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(p0: any): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static EPSILON: number;

            static MAX_SAFE_INTEGER: number;

            static MAX_VALUE: number;

            static MIN_SAFE_INTEGER: number;

            static MIN_VALUE: number;

            static NEGATIVE_INFINITY: number;

            static NaN: number;

            static POSITIVE_INFINITY: number;

            static isFinite(p0: any): any;

            static isInteger(p0: any): any;

            static isNaN(p0: any): any;

            static isSafeInteger(p0: any): any;

            static parseFloat(p0: any): any;

            static parseInt(p0: any, p1: any): any;

        }

        const size: {
            default: string;
            type: any[];
        };

        namespace appendToBody {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace closeDelay {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace closeOnClickModal {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace closeOnPressEscape {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace customClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace destroyOnClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace direction {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): any;

        }

        namespace lockScroll {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace modal {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace modalFade {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace modelValue {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

            const required: boolean;

        }

        namespace openDelay {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace showClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace title {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace withHeader {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElDropdown {
    const components: {
        ElButton: {
            emits: string[];
            install: any;
            name: string;
            props: {
                autofocus: any;
                circle: any;
                disabled: any;
                icon: {
                    default: string;
                    type: any;
                };
                loading: any;
                nativeType: {
                    default: string;
                    type: any;
                    validator: any;
                };
                plain: any;
                round: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                    validator: any;
                };
            };
            render: any;
            setup: any;
        };
        ElButtonGroup: {
            install: any;
            name: string;
            render: any;
        };
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElScrollbar: {
            components: {
                Bar: {
                    name: string;
                    props: {
                        move: any;
                        size: any;
                        vertical: any;
                    };
                    render: any;
                    setup: any;
                };
            };
            install: any;
            name: string;
            props: {
                native: {
                    default: boolean;
                    type: any;
                };
                noresize: any;
                tag: {
                    default: string;
                    type: any;
                };
                viewClass: {
                    default: string;
                    type: any[];
                };
                viewStyle: {
                    default: string;
                    type: any[];
                };
                wrapClass: {
                    default: string;
                    type: any[];
                };
                wrapStyle: {
                    default: string;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class splitButton {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class type {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        const maxHeight: {
            default: string;
            type: any[];
        };

        namespace effect {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace hideOnClick {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace hideTimeout {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace placement {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace showTimeout {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace tabindex {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace trigger {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElDropdownItem {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class divided {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class icon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace command {
            const type: any[];

        }

    }

}

export namespace ElDropdownMenu {
    const directives: {
        ClickOutside: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElEmpty {
    const components: {
        ImgEmpty: {
            name: string;
            render: any;
            setup: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class imageSize {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(p0: any): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static EPSILON: number;

            static MAX_SAFE_INTEGER: number;

            static MAX_VALUE: number;

            static MIN_SAFE_INTEGER: number;

            static MIN_VALUE: number;

            static NEGATIVE_INFINITY: number;

            static NaN: number;

            static POSITIVE_INFINITY: number;

            static isFinite(p0: any): any;

            static isInteger(p0: any): any;

            static isNaN(p0: any): any;

            static isSafeInteger(p0: any): any;

            static parseFloat(p0: any): any;

            static parseInt(p0: any, p1: any): any;

        }

        namespace description {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace image {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElFooter {
    const name: string;

    const props: {
        height: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElForm {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inline {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class inlineMessage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class labelPosition {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class labelWidth {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class model {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static fromEntries(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class rules {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static fromEntries(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class size {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class statusIcon {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace hideRequiredAsterisk {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace labelSuffix {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace showMessage {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace validateOnRuleChange {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElFormItem {
    const componentName: string;

    const components: {
        LabelWrap: {
            name: string;
            props: {
                isAutoWidth: any;
                updateAll: any;
            };
            setup: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class error {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class label {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class labelWidth {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class prop {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class validateStatus {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        const inlineMessage: {
            default: string;
            type: any[];
        };

        const rules: any[];

        namespace required {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showMessage {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace size {
            class types {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

    }

}

export namespace ElHeader {
    const name: string;

    const props: {
        height: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElIcon {
    const name: string;

    const props: {
        name: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElImage {
    const components: {
        ImageViewer: {
            emits: string[];
            install: any;
            name: string;
            props: {
                hideOnClickModal: {
                    default: boolean;
                    type: any;
                };
                infinite: {
                    default: boolean;
                    type: any;
                };
                initialIndex: {
                    default: number;
                    type: any;
                };
                urlList: {
                    default: any[];
                    type: any;
                };
                zIndex: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const inheritAttrs: boolean;

    const name: string;

    const props: {
        fit: {
            default: string;
            type: any;
        };
        hideOnClickModal: {
            default: boolean;
            type: any;
        };
        lazy: {
            default: boolean;
            type: any;
        };
        previewSrcList: {
            default: any;
            type: any;
        };
        scrollContainer: {
            default: any;
            type: any[];
        };
        src: {
            default: string;
            type: any;
        };
        zIndex: {
            default: number;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElImageViewer {
    const emits: string[];

    const name: string;

    const props: {
        hideOnClickModal: {
            default: boolean;
            type: any;
        };
        infinite: {
            default: boolean;
            type: any;
        };
        initialIndex: {
            default: number;
            type: any;
        };
        urlList: {
            default: any[];
            type: any;
        };
        zIndex: {
            default: number;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElInfiniteScroll {
    function install(app: any): void;

    function mounted(...args: any[]): void;

    function unmounted(...args: any[]): void;

}

export namespace ElInput {
    const emits: string[];

    const inheritAttrs: boolean;

    const name: string;

    const props: {
        autocomplete: {
            default: string;
            type: any;
            validator: any;
        };
        autosize: {
            default: boolean;
            type: any[];
        };
        clearable: {
            default: boolean;
            type: any;
        };
        disabled: {
            default: boolean;
            type: any;
        };
        form: {
            default: string;
            type: any;
        };
        label: {
            type: any;
        };
        modelValue: {
            default: string;
            type: any[];
        };
        placeholder: {
            type: any;
        };
        prefixIcon: {
            default: string;
            type: any;
        };
        readonly: {
            default: boolean;
            type: any;
        };
        resize: {
            type: any;
            validator: any;
        };
        showPassword: {
            default: boolean;
            type: any;
        };
        showWordLimit: {
            default: boolean;
            type: any;
        };
        size: {
            type: any;
            validator: any;
        };
        suffixIcon: {
            default: string;
            type: any;
        };
        tabindex: {
            type: any;
        };
        type: {
            default: string;
            type: any;
        };
        validateEvent: {
            default: boolean;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElInputNumber {
    const components: {
        ElInput: {
            emits: string[];
            inheritAttrs: boolean;
            install: any;
            name: string;
            props: {
                autocomplete: {
                    default: string;
                    type: any;
                    validator: any;
                };
                autosize: {
                    default: boolean;
                    type: any[];
                };
                clearable: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                form: {
                    default: string;
                    type: any;
                };
                label: {
                    type: any;
                };
                modelValue: {
                    default: string;
                    type: any[];
                };
                placeholder: {
                    type: any;
                };
                prefixIcon: {
                    default: string;
                    type: any;
                };
                readonly: {
                    default: boolean;
                    type: any;
                };
                resize: {
                    type: any;
                    validator: any;
                };
                showPassword: {
                    default: boolean;
                    type: any;
                };
                showWordLimit: {
                    default: boolean;
                    type: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                suffixIcon: {
                    default: string;
                    type: any;
                };
                tabindex: {
                    type: any;
                };
                type: {
                    default: string;
                    type: any;
                };
                validateEvent: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const directives: {
        RepeatClick: {
            beforeMount: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class label {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class name {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class placeholder {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace controls {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace controlsPosition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace max {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace min {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace modelValue {
            const required: boolean;

            function validator(val: any): any;

        }

        namespace precision {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

            function validator(val: any): void;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace step {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace stepStrictly {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElLink {
    const emits: string[];

    const name: string;

    const props: {
        disabled: {
            default: boolean;
            type: any;
        };
        href: {
            default: string;
            type: any;
        };
        icon: {
            default: string;
            type: any;
        };
        type: {
            default: string;
            type: any;
            validator: any;
        };
        underline: {
            default: boolean;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElLoading {
    function install(...args: any[]): void;

    function service(options: any): any;

    namespace directive {
        function mounted(...args: any[]): void;

        function unmounted(...args: any[]): void;

        function updated(...args: any[]): void;

    }

}

export namespace ElMain {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElMenu {
    const componentName: string;

    const components: {
        ElMenuCollapseTransition: {
            name: string;
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class collapse {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class defaultOpeneds {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class router {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class uniqueOpened {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace activeTextColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace backgroundColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace collapseTransition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace defaultActive {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace menuTrigger {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace mode {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace textColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElMenuItem {
    const componentName: string;

    const components: {
        ElTooltip: {
            components: {
                ElPopper: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        appendToBody: {
                            default: boolean;
                            type: any;
                        };
                        arrowOffset: {
                            default: number;
                            type: any;
                        };
                        autoClose: {
                            default: number;
                            type: any;
                        };
                        boundariesPadding: {
                            default: number;
                            type: any;
                        };
                        class: {
                            default: string;
                            type: any;
                        };
                        content: {
                            default: string;
                            type: any;
                        };
                        cutoff: {
                            default: boolean;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        effect: {
                            default: string;
                            type: any;
                        };
                        enterable: {
                            default: boolean;
                            type: any;
                        };
                        gpuAcceleration: {
                            default: boolean;
                            type: any;
                        };
                        hideAfter: {
                            default: number;
                            type: any;
                        };
                        manualMode: {
                            default: boolean;
                            type: any;
                        };
                        offset: {
                            default: number;
                            type: any;
                        };
                        placement: {
                            default: string;
                            type: any;
                        };
                        popperClass: {
                            default: string;
                            type: any;
                        };
                        popperOptions: {
                            default: any;
                            type: any;
                        };
                        pure: {
                            default: boolean;
                            type: any;
                        };
                        showAfter: {
                            default: number;
                            type: any;
                        };
                        showArrow: {
                            default: boolean;
                            type: any;
                        };
                        stopPopperMouseEvent: {
                            default: boolean;
                            type: any;
                        };
                        strategy: {
                            default: string;
                            type: any;
                        };
                        style: any;
                        transition: {
                            default: string;
                            type: any;
                        };
                        trigger: {
                            default: string;
                            type: any[];
                        };
                        visible: {
                            default: any;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            emits: string[];
            install: any;
            name: string;
            props: {
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manual: {
                    default: boolean;
                    type: any;
                };
                modelValue: {
                    default: any;
                    type: any;
                    validator: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                openDelay: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: any;
                    type: any[];
                };
                visibleArrow: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const route: any[];

        namespace index {
            function validator(val: any): void;

        }

    }

}

export namespace ElMenuItemGroup {
    const componentName: string;

    const name: string;

    const props: {
        title: {
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElMessage {
    function closeAll(): void;

    function error(options: any): any;

    function info(options: any): any;

    function install(app: any): void;

    function success(options: any): any;

    function warning(options: any): any;

}

export namespace ElMessageBox {
    function alert(message: any, title: any, options: any): any;

    function close(): void;

    function confirm(message: any, title: any, options: any): any;

    function install(app: any): void;

    function prompt(message: any, title: any, options: any): any;

}

export namespace ElNotification {
    function error(options: any): any;

    function info(options: any): any;

    function install(app: any): void;

    function success(options: any): any;

    function warning(options: any): any;

}

export namespace ElOption {
    const componentName: string;

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class created {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const label: any[];

        const value: {
            required: boolean;
            type: any[];
        };

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElOptionGroup {
    const componentName: string;

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class label {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElPageHeader {
    const emits: string[];

    const name: string;

    const props: {
        content: {
            default: string;
            type: any;
        };
        title: {
            default: any;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElPagination {
    const components: {
        Jumper: {
            components: {
                ElInput: {
                    emits: string[];
                    inheritAttrs: boolean;
                    install: any;
                    name: string;
                    props: {
                        autocomplete: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        autosize: {
                            default: boolean;
                            type: any[];
                        };
                        clearable: {
                            default: boolean;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        form: {
                            default: string;
                            type: any;
                        };
                        label: {
                            type: any;
                        };
                        modelValue: {
                            default: string;
                            type: any[];
                        };
                        placeholder: {
                            type: any;
                        };
                        prefixIcon: {
                            default: string;
                            type: any;
                        };
                        readonly: {
                            default: boolean;
                            type: any;
                        };
                        resize: {
                            type: any;
                            validator: any;
                        };
                        showPassword: {
                            default: boolean;
                            type: any;
                        };
                        showWordLimit: {
                            default: boolean;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        suffixIcon: {
                            default: string;
                            type: any;
                        };
                        tabindex: {
                            type: any;
                        };
                        type: {
                            default: string;
                            type: any;
                        };
                        validateEvent: {
                            default: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            render: any;
            setup: any;
        };
        Next: {
            name: string;
            props: {
                currentPage: {
                    default: number;
                    type: any;
                };
                disabled: any;
                nextText: {
                    default: string;
                    type: any;
                };
                pageCount: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        Pager: {
            emits: string[];
            name: string;
            props: {
                currentPage: {
                    default: number;
                    type: any;
                };
                disabled: any;
                pageCount: {
                    type: any;
                };
                pagerCount: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        Prev: {
            name: string;
            props: {
                currentPage: {
                    default: number;
                    type: any;
                };
                disabled: any;
                prevText: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        Sizes: {
            components: {
                ElOption: {
                    componentName: string;
                    install: any;
                    name: string;
                    props: {
                        created: any;
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        label: any[];
                        value: {
                            required: boolean;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElSelect: {
                    componentName: string;
                    components: {
                        ElInput: {
                            emits: string[];
                            inheritAttrs: boolean;
                            install: any;
                            name: string;
                            props: {
                                autocomplete: {
                                    default: string;
                                    type: any;
                                    validator: any;
                                };
                                autosize: {
                                    default: boolean;
                                    type: any[];
                                };
                                clearable: {
                                    default: boolean;
                                    type: any;
                                };
                                disabled: {
                                    default: boolean;
                                    type: any;
                                };
                                form: {
                                    default: string;
                                    type: any;
                                };
                                label: {
                                    type: any;
                                };
                                modelValue: {
                                    default: string;
                                    type: any[];
                                };
                                placeholder: {
                                    type: any;
                                };
                                prefixIcon: {
                                    default: string;
                                    type: any;
                                };
                                readonly: {
                                    default: boolean;
                                    type: any;
                                };
                                resize: {
                                    type: any;
                                    validator: any;
                                };
                                showPassword: {
                                    default: boolean;
                                    type: any;
                                };
                                showWordLimit: {
                                    default: boolean;
                                    type: any;
                                };
                                size: {
                                    type: any;
                                    validator: any;
                                };
                                suffixIcon: {
                                    default: string;
                                    type: any;
                                };
                                tabindex: {
                                    type: any;
                                };
                                type: {
                                    default: string;
                                    type: any;
                                };
                                validateEvent: {
                                    default: boolean;
                                    type: any;
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        ElOption: {
                            componentName: string;
                            install: any;
                            name: string;
                            props: {
                                created: any;
                                disabled: {
                                    default: boolean;
                                    type: any;
                                };
                                label: any[];
                                value: {
                                    required: boolean;
                                    type: any[];
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        ElPopper: {
                            emits: string[];
                            install: any;
                            name: string;
                            props: {
                                appendToBody: {
                                    default: boolean;
                                    type: any;
                                };
                                arrowOffset: {
                                    default: number;
                                    type: any;
                                };
                                autoClose: {
                                    default: number;
                                    type: any;
                                };
                                boundariesPadding: {
                                    default: number;
                                    type: any;
                                };
                                class: {
                                    default: string;
                                    type: any;
                                };
                                content: {
                                    default: string;
                                    type: any;
                                };
                                cutoff: {
                                    default: boolean;
                                    type: any;
                                };
                                disabled: {
                                    default: boolean;
                                    type: any;
                                };
                                effect: {
                                    default: string;
                                    type: any;
                                };
                                enterable: {
                                    default: boolean;
                                    type: any;
                                };
                                gpuAcceleration: {
                                    default: boolean;
                                    type: any;
                                };
                                hideAfter: {
                                    default: number;
                                    type: any;
                                };
                                manualMode: {
                                    default: boolean;
                                    type: any;
                                };
                                offset: {
                                    default: number;
                                    type: any;
                                };
                                placement: {
                                    default: string;
                                    type: any;
                                };
                                popperClass: {
                                    default: string;
                                    type: any;
                                };
                                popperOptions: {
                                    default: any;
                                    type: any;
                                };
                                pure: {
                                    default: boolean;
                                    type: any;
                                };
                                showAfter: {
                                    default: number;
                                    type: any;
                                };
                                showArrow: {
                                    default: boolean;
                                    type: any;
                                };
                                stopPopperMouseEvent: {
                                    default: boolean;
                                    type: any;
                                };
                                strategy: {
                                    default: string;
                                    type: any;
                                };
                                style: any;
                                transition: {
                                    default: string;
                                    type: any;
                                };
                                trigger: {
                                    default: string;
                                    type: any[];
                                };
                                visible: {
                                    default: any;
                                    type: any;
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        ElScrollbar: {
                            components: {
                                Bar: {
                                    name: string;
                                    props: {
                                        move: any;
                                        size: any;
                                        vertical: any;
                                    };
                                    render: any;
                                    setup: any;
                                };
                            };
                            install: any;
                            name: string;
                            props: {
                                native: {
                                    default: boolean;
                                    type: any;
                                };
                                noresize: any;
                                tag: {
                                    default: string;
                                    type: any;
                                };
                                viewClass: {
                                    default: string;
                                    type: any[];
                                };
                                viewStyle: {
                                    default: string;
                                    type: any[];
                                };
                                wrapClass: {
                                    default: string;
                                    type: any[];
                                };
                                wrapStyle: {
                                    default: string;
                                    type: any[];
                                };
                            };
                            render: any;
                            setup: any;
                        };
                        ElSelectMenu: {
                            componentName: string;
                            name: string;
                            render: any;
                            setup: any;
                        };
                        ElTag: {
                            emits: string[];
                            install: any;
                            name: string;
                            props: {
                                closable: any;
                                color: {
                                    default: string;
                                    type: any;
                                };
                                disableTransitions: any;
                                effect: {
                                    default: string;
                                    type: any;
                                    validator: any;
                                };
                                hit: any;
                                size: {
                                    type: any;
                                    validator: any;
                                };
                                type: {
                                    default: string;
                                    type: any;
                                };
                            };
                            render: any;
                            setup: any;
                        };
                    };
                    directives: {
                        ClickOutside: {
                            beforeMount: any;
                            unmounted: any;
                            updated: any;
                        };
                    };
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        allowCreate: any;
                        autocomplete: {
                            default: string;
                            type: any;
                        };
                        automaticDropdown: any;
                        clearIcon: {
                            default: string;
                            type: any;
                        };
                        clearable: any;
                        collapseTags: any;
                        defaultFirstOption: any;
                        disabled: any;
                        filterMethod: any;
                        filterable: any;
                        id: any;
                        loading: any;
                        loadingText: any;
                        modelValue: any[];
                        multiple: any;
                        multipleLimit: {
                            default: number;
                            type: any;
                        };
                        name: any;
                        noDataText: any;
                        noMatchText: any;
                        placeholder: {
                            type: any;
                        };
                        popperAppendToBody: {
                            default: boolean;
                            type: any;
                        };
                        popperClass: {
                            default: string;
                            type: any;
                        };
                        remote: any;
                        remoteMethod: any;
                        reserveKeyword: any;
                        size: {
                            type: any;
                            validator: any;
                        };
                        valueKey: {
                            default: string;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            emits: string[];
            name: string;
            props: {
                disabled: any;
                pageSize: any;
                pageSizes: {
                    default: any;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        Total: {
            name: string;
            props: {
                total: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace props {
        class background {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class hideOnSinglePage {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class small {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace currentPage {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace layout {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace nextText {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace pageCount {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace pageSize {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace pageSizes {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace pagerCount {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

            function validator(value: any): any;

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace prevText {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace total {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

    }

}

export namespace ElPopconfirm {
    const components: {
        ElButton: {
            emits: string[];
            install: any;
            name: string;
            props: {
                autofocus: any;
                circle: any;
                disabled: any;
                icon: {
                    default: string;
                    type: any;
                };
                loading: any;
                nativeType: {
                    default: string;
                    type: any;
                    validator: any;
                };
                plain: any;
                round: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                    validator: any;
                };
            };
            render: any;
            setup: any;
        };
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    const props: {
        cancelButtonText: {
            type: any;
        };
        cancelButtonType: {
            default: string;
            type: any;
        };
        confirmButtonText: {
            type: any;
        };
        confirmButtonType: {
            default: string;
            type: any;
        };
        hideIcon: {
            default: boolean;
            type: any;
        };
        icon: {
            default: string;
            type: any;
        };
        iconColor: {
            default: string;
            type: any;
        };
        title: {
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElPopover {
    const components: {
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace directive {
        function mounted(...args: any[]): void;

        function updated(...args: any[]): void;

    }

    namespace props {
        class style {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static fromEntries(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        const width: {
            default: number;
            type: any[];
        };

        namespace appendToBody {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace arrowOffset {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace autoClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace boundariesPadding {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace content {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace cutoff {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace effect {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace enterable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace gpuAcceleration {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace hideAfter {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace manualMode {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace offset {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace placement {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperOptions {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace pure {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showAfter {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace showArrow {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace stopPopperMouseEvent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace strategy {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace title {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace transition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace trigger {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace visible {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElPopper {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace props {
        class style {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static fromEntries(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        const trigger: {
            default: string;
            type: any[];
        };

        namespace appendToBody {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace arrowOffset {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace autoClose {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace boundariesPadding {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace content {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace cutoff {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace effect {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace enterable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace gpuAcceleration {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace hideAfter {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace manualMode {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace offset {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace placement {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperOptions {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace pure {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showAfter {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace showArrow {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace stopPopperMouseEvent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace strategy {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace transition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace visible {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElProgress {
    const name: string;

    const props: {
        color: {
            default: string;
            type: any[];
        };
        format: {
            default: any;
            type: any;
        };
        percentage: {
            default: number;
            required: boolean;
            type: any;
            validator: any;
        };
        showText: {
            default: boolean;
            type: any;
        };
        status: {
            default: string;
            type: any;
            validator: any;
        };
        strokeLinecap: {
            default: string;
            type: any;
        };
        strokeWidth: {
            default: number;
            type: any;
        };
        textInside: {
            default: boolean;
            type: any;
        };
        type: {
            default: string;
            type: any;
            validator: any;
        };
        width: {
            default: number;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElRadio {
    const componentName: string;

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class border {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const label: {
            default: string;
            type: any[];
        };

        const modelValue: {
            default: string;
            type: any[];
        };

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

    }

}

export namespace ElRadioButton {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const label: {
            default: string;
            type: any[];
        };

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElRadioGroup {
    const componentName: string;

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const modelValue: {
            default: string;
            type: any[];
        };

        namespace fill {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace textColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElRate {
    const emits: string[];

    const name: string;

    const props: {
        allowHalf: {
            default: boolean;
            type: any;
        };
        colors: {
            default: any;
            type: any[];
        };
        disabled: {
            default: boolean;
            type: any;
        };
        disabledVoidColor: {
            default: string;
            type: any;
        };
        disabledVoidIconClass: {
            default: string;
            type: any;
        };
        highThreshold: {
            default: number;
            type: any;
        };
        iconClasses: {
            default: any;
            type: any[];
        };
        lowThreshold: {
            default: number;
            type: any;
        };
        max: {
            default: number;
            type: any;
        };
        modelValue: {
            default: number;
            type: any;
        };
        scoreTemplate: {
            default: string;
            type: any;
        };
        showScore: {
            default: boolean;
            type: any;
        };
        showText: {
            default: boolean;
            type: any;
        };
        textColor: {
            default: string;
            type: any;
        };
        texts: {
            default: any;
            type: any;
        };
        voidColor: {
            default: string;
            type: any;
        };
        voidIconClass: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElRow {
    const name: string;

    const props: {
        align: {
            default: string;
            type: any;
        };
        gutter: {
            default: number;
            type: any;
        };
        justify: {
            default: string;
            type: any;
        };
        tag: {
            default: string;
            type: any;
        };
        type: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function setup(...args: any[]): void;

}

export namespace ElScrollbar {
    const components: {
        Bar: {
            name: string;
            props: {
                move: any;
                size: any;
                vertical: any;
            };
            render: any;
            setup: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class noresize {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const viewClass: {
            default: string;
            type: any[];
        };

        const viewStyle: {
            default: string;
            type: any[];
        };

        const wrapClass: {
            default: string;
            type: any[];
        };

        const wrapStyle: {
            default: string;
            type: any[];
        };

        namespace tag {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElSelect {
    const componentName: string;

    const components: {
        ElInput: {
            emits: string[];
            inheritAttrs: boolean;
            install: any;
            name: string;
            props: {
                autocomplete: {
                    default: string;
                    type: any;
                    validator: any;
                };
                autosize: {
                    default: boolean;
                    type: any[];
                };
                clearable: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                form: {
                    default: string;
                    type: any;
                };
                label: {
                    type: any;
                };
                modelValue: {
                    default: string;
                    type: any[];
                };
                placeholder: {
                    type: any;
                };
                prefixIcon: {
                    default: string;
                    type: any;
                };
                readonly: {
                    default: boolean;
                    type: any;
                };
                resize: {
                    type: any;
                    validator: any;
                };
                showPassword: {
                    default: boolean;
                    type: any;
                };
                showWordLimit: {
                    default: boolean;
                    type: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                suffixIcon: {
                    default: string;
                    type: any;
                };
                tabindex: {
                    type: any;
                };
                type: {
                    default: string;
                    type: any;
                };
                validateEvent: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElOption: {
            componentName: string;
            install: any;
            name: string;
            props: {
                created: any;
                disabled: {
                    default: boolean;
                    type: any;
                };
                label: any[];
                value: {
                    required: boolean;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        ElScrollbar: {
            components: {
                Bar: {
                    name: string;
                    props: {
                        move: any;
                        size: any;
                        vertical: any;
                    };
                    render: any;
                    setup: any;
                };
            };
            install: any;
            name: string;
            props: {
                native: {
                    default: boolean;
                    type: any;
                };
                noresize: any;
                tag: {
                    default: string;
                    type: any;
                };
                viewClass: {
                    default: string;
                    type: any[];
                };
                viewStyle: {
                    default: string;
                    type: any[];
                };
                wrapClass: {
                    default: string;
                    type: any[];
                };
                wrapStyle: {
                    default: string;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
        ElSelectMenu: {
            componentName: string;
            name: string;
            render: any;
            setup: any;
        };
        ElTag: {
            emits: string[];
            install: any;
            name: string;
            props: {
                closable: any;
                color: {
                    default: string;
                    type: any;
                };
                disableTransitions: any;
                effect: {
                    default: string;
                    type: any;
                    validator: any;
                };
                hit: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const directives: {
        ClickOutside: {
            beforeMount: any;
            unmounted: any;
            updated: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class allowCreate {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class automaticDropdown {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class clearable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class collapseTags {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class defaultFirstOption {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class filterMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class filterable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class id {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class loading {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class loadingText {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class multiple {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class name {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class noDataText {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class noMatchText {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class remote {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class remoteMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class reserveKeyword {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const modelValue: any[];

        namespace autocomplete {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace clearIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace multipleLimit {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace placeholder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperAppendToBody {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace valueKey {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElSkeleton {
    const components: {
        ElSkeletonItem: {
            components: {
                ImgPlaceholder: {
                    name: string;
                    render: any;
                };
            };
            install: any;
            name: string;
            props: {
                variant: {
                    default: string;
                    type: any;
                };
            };
            render: any;
        };
    };

    const name: string;

    const props: {
        animated: {
            default: boolean;
            type: any;
        };
        count: {
            default: number;
            type: any;
        };
        loading: {
            default: boolean;
            type: any;
        };
        rows: {
            default: number;
            type: any;
        };
        throttle: {
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElSkeletonItem {
    const components: {
        ImgPlaceholder: {
            name: string;
            render: any;
        };
    };

    const name: string;

    const props: {
        variant: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

}

export namespace ElSlider {
    const components: {
        ElInputNumber: {
            components: {
                ElInput: {
                    emits: string[];
                    inheritAttrs: boolean;
                    install: any;
                    name: string;
                    props: {
                        autocomplete: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        autosize: {
                            default: boolean;
                            type: any[];
                        };
                        clearable: {
                            default: boolean;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        form: {
                            default: string;
                            type: any;
                        };
                        label: {
                            type: any;
                        };
                        modelValue: {
                            default: string;
                            type: any[];
                        };
                        placeholder: {
                            type: any;
                        };
                        prefixIcon: {
                            default: string;
                            type: any;
                        };
                        readonly: {
                            default: boolean;
                            type: any;
                        };
                        resize: {
                            type: any;
                            validator: any;
                        };
                        showPassword: {
                            default: boolean;
                            type: any;
                        };
                        showWordLimit: {
                            default: boolean;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        suffixIcon: {
                            default: string;
                            type: any;
                        };
                        tabindex: {
                            type: any;
                        };
                        type: {
                            default: string;
                            type: any;
                        };
                        validateEvent: {
                            default: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            directives: {
                RepeatClick: {
                    beforeMount: any;
                };
            };
            emits: string[];
            install: any;
            name: string;
            props: {
                controls: {
                    default: boolean;
                    type: any;
                };
                controlsPosition: {
                    default: string;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                label: any;
                max: {
                    default: number;
                    type: any;
                };
                min: {
                    default: number;
                    type: any;
                };
                modelValue: {
                    required: boolean;
                    validator: any;
                };
                name: any;
                placeholder: any;
                precision: {
                    type: any;
                    validator: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                step: {
                    default: number;
                    type: any;
                };
                stepStrictly: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        SliderButton: {
            components: {
                ElTooltip: {
                    components: {
                        ElPopper: {
                            emits: string[];
                            install: any;
                            name: string;
                            props: {
                                appendToBody: {
                                    default: boolean;
                                    type: any;
                                };
                                arrowOffset: {
                                    default: number;
                                    type: any;
                                };
                                autoClose: {
                                    default: number;
                                    type: any;
                                };
                                boundariesPadding: {
                                    default: number;
                                    type: any;
                                };
                                class: {
                                    default: string;
                                    type: any;
                                };
                                content: {
                                    default: string;
                                    type: any;
                                };
                                cutoff: {
                                    default: boolean;
                                    type: any;
                                };
                                disabled: {
                                    default: boolean;
                                    type: any;
                                };
                                effect: {
                                    default: string;
                                    type: any;
                                };
                                enterable: {
                                    default: boolean;
                                    type: any;
                                };
                                gpuAcceleration: {
                                    default: boolean;
                                    type: any;
                                };
                                hideAfter: {
                                    default: number;
                                    type: any;
                                };
                                manualMode: {
                                    default: boolean;
                                    type: any;
                                };
                                offset: {
                                    default: number;
                                    type: any;
                                };
                                placement: {
                                    default: string;
                                    type: any;
                                };
                                popperClass: {
                                    default: string;
                                    type: any;
                                };
                                popperOptions: {
                                    default: any;
                                    type: any;
                                };
                                pure: {
                                    default: boolean;
                                    type: any;
                                };
                                showAfter: {
                                    default: number;
                                    type: any;
                                };
                                showArrow: {
                                    default: boolean;
                                    type: any;
                                };
                                stopPopperMouseEvent: {
                                    default: boolean;
                                    type: any;
                                };
                                strategy: {
                                    default: string;
                                    type: any;
                                };
                                style: any;
                                transition: {
                                    default: string;
                                    type: any;
                                };
                                trigger: {
                                    default: string;
                                    type: any[];
                                };
                                visible: {
                                    default: any;
                                    type: any;
                                };
                            };
                            render: any;
                            setup: any;
                        };
                    };
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        class: {
                            default: string;
                            type: any;
                        };
                        content: {
                            default: string;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        effect: {
                            default: string;
                            type: any;
                        };
                        enterable: {
                            default: boolean;
                            type: any;
                        };
                        hideAfter: {
                            default: number;
                            type: any;
                        };
                        manual: {
                            default: boolean;
                            type: any;
                        };
                        modelValue: {
                            default: any;
                            type: any;
                            validator: any;
                        };
                        offset: {
                            default: number;
                            type: any;
                        };
                        openDelay: {
                            default: number;
                            type: any;
                        };
                        placement: {
                            default: string;
                            type: any;
                        };
                        popperOptions: {
                            default: any;
                            type: any;
                        };
                        showAfter: {
                            default: number;
                            type: any;
                        };
                        stopPopperMouseEvent: {
                            default: boolean;
                            type: any;
                        };
                        transition: {
                            default: string;
                            type: any;
                        };
                        trigger: {
                            default: any;
                            type: any[];
                        };
                        visibleArrow: {
                            default: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            emits: string[];
            name: string;
            props: {
                modelValue: {
                    default: number;
                    type: any;
                };
                tooltipClass: {
                    default: string;
                    type: any;
                };
                vertical: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        SliderMarker: {
            name: string;
            props: {
                mark: {
                    default: any;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class marks {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static fromEntries(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        const modelValue: {
            default: number;
            type: any[];
        };

        namespace debounce {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace formatTooltip {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace height {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace inputSize {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace label {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace max {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace min {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace range {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showInput {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showInputControls {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showStops {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showTooltip {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace step {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace tooltipClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace vertical {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElSpace {
    const name: string;

    const props: {
        alignment: {
            default: string;
            type: any;
        };
        class: {
            default: string;
            type: any[];
        };
        direction: {
            default: string;
            type: any;
        };
        prefixCls: {
            type: any;
        };
        size: {
            type: any[];
            validator: any;
        };
        spacer: {
            default: any;
            type: any[];
            validator: any;
        };
        style: {
            type: any[];
        };
        wrap: {
            default: boolean;
            type: any;
        };
    };

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

}

export namespace ElStep {
    const name: string;

    const props: {
        description: {
            default: string;
            type: any;
        };
        icon: {
            default: string;
            type: any;
        };
        status: {
            default: string;
            type: any;
            validator: any;
        };
        title: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElSteps {
    const emits: string[];

    const name: string;

    const props: {
        active: {
            default: number;
            type: any;
        };
        alignCenter: {
            default: boolean;
            type: any;
        };
        direction: {
            default: string;
            type: any;
            validator: any;
        };
        finishStatus: {
            default: string;
            type: any;
            validator: any;
        };
        processStatus: {
            default: string;
            type: any;
            validator: any;
        };
        simple: {
            default: boolean;
            type: any;
        };
        space: {
            default: string;
            type: any[];
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElSubmenu {
    const componentName: string;

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class popperClass {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace hideTimeout {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace index {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const required: boolean;

        }

        namespace popperAppendToBody {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showTimeout {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

    }

}

export namespace ElSwitch {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class id {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        const activeValue: {
            default: boolean;
            type: any[];
        };

        const inactiveValue: {
            default: boolean;
            type: any[];
        };

        const modelValue: {
            default: boolean;
            type: any[];
        };

        const value: {
            default: boolean;
            type: any[];
        };

        namespace activeColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace activeIconClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace activeText {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace inactiveColor {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace inactiveIconClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace inactiveText {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace loading {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace validateEvent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace width {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

    }

}

export namespace ElTabPane {
    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class closable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class lazy {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace label {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElTable {
    const components: {
        TableBody: {
            name: string;
            props: {
                context: {
                    default: any;
                    type: any;
                };
                fixed: {
                    default: string;
                    type: any;
                };
                highlight: any;
                rowClassName: any[];
                rowStyle: any[];
                store: {
                    required: boolean;
                    type: any;
                };
                stripe: any;
                tooltipEffect: any;
            };
            render: any;
            setup: any;
        };
        TableFooter: {
            name: string;
            props: {
                border: any;
                defaultSort: {
                    default: any;
                    type: any;
                };
                fixed: {
                    default: string;
                    type: any;
                };
                store: {
                    required: boolean;
                    type: any;
                };
                sumText: any;
                summaryMethod: any;
            };
            render: any;
            setup: any;
        };
        TableHeader: {
            components: {
                ElCheckbox: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        border: any;
                        checked: any;
                        controls: {
                            default: any;
                            type: any;
                        };
                        disabled: any;
                        falseLabel: {
                            default: any;
                            type: any[];
                        };
                        id: {
                            default: any;
                            type: any;
                        };
                        indeterminate: any;
                        label: {
                            type: any[];
                        };
                        modelValue: {
                            default: any;
                            type: any[];
                        };
                        name: {
                            default: any;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        trueLabel: {
                            default: any;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            name: string;
            props: {
                border: any;
                defaultSort: {
                    default: any;
                    type: any;
                };
                fixed: {
                    default: string;
                    type: any;
                };
                store: {
                    required: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const directives: {
        Mousewheel: {
            beforeMount: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class border {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class defaultExpandAll {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class defaultSort {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            hasOwnProperty(p0: any): any;

            // Native method; no parameter or return type inference available
            isPrototypeOf(p0: any): any;

            // Native method; no parameter or return type inference available
            propertyIsEnumerable(p0: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static assign(p0: any, p1: any): any;

            static create(p0: any, p1: any): any;

            static defineProperties(p0: any, p1: any): any;

            static defineProperty(p0: any, p1: any, p2: any): any;

            static entries(p0: any): any;

            static freeze(p0: any): any;

            static fromEntries(p0: any): any;

            static getOwnPropertyDescriptor(p0: any, p1: any): any;

            static getOwnPropertyDescriptors(p0: any): any;

            static getOwnPropertyNames(p0: any): any;

            static getOwnPropertySymbols(p0: any): any;

            static getPrototypeOf(p0: any): any;

            static is(p0: any, p1: any): any;

            static isExtensible(p0: any): any;

            static isFrozen(p0: any): any;

            static isSealed(p0: any): any;

            static keys(p0: any): any;

            static preventExtensions(p0: any): any;

            static seal(p0: any): any;

            static setPrototypeOf(p0: any, p1: any): any;

            static values(p0: any): any;

        }

        class emptyText {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class expandRowKeys {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class highlightCurrentRow {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class lazy {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class load {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class showSummary {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class size {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class spanMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class stripe {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class sumText {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class summaryMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class tooltipEffect {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        const cellClassName: any[];

        const cellStyle: any[];

        const currentRowKey: any[];

        const headerCellClassName: any[];

        const headerCellStyle: any[];

        const headerRowClassName: any[];

        const headerRowStyle: any[];

        const height: any[];

        const maxHeight: any[];

        const rowClassName: any[];

        const rowKey: any[];

        const rowStyle: any[];

        const width: any[];

        namespace data {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace fit {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace indent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace selectOnIndeterminate {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showHeader {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace treeProps {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

    }

}

export namespace ElTableColumn {
    const components: {
        ElCheckbox: {
            emits: string[];
            install: any;
            name: string;
            props: {
                border: any;
                checked: any;
                controls: {
                    default: any;
                    type: any;
                };
                disabled: any;
                falseLabel: {
                    default: any;
                    type: any[];
                };
                id: {
                    default: any;
                    type: any;
                };
                indeterminate: any;
                label: {
                    type: any[];
                };
                modelValue: {
                    default: any;
                    type: any[];
                };
                name: {
                    default: any;
                    type: any;
                };
                size: {
                    type: any;
                    validator: any;
                };
                trueLabel: {
                    default: any;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace props {
        class align {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class className {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class columnKey {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class filterMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class filterPlacement {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class filteredValue {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class filters {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class formatter {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class headerAlign {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class label {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class labelClassName {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class prop {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class property {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class renderHeader {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class reserveSelection {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class selectable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class showOverflowTooltip {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class showTooltipWhenOverflow {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class sortMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        const fixed: any[];

        const index: any[];

        const sortBy: any[];

        const sortable: {
            default: boolean;
            type: any[];
        };

        namespace filterMultiple {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace minWidth {
            const type: any[];

        }

        namespace resizable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace sortOrders {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

            function validator(...args: any[]): void;

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace width {
            const type: any[];

        }

    }

}

export namespace ElTabs {
    const components: {
        TabNav: {
            components: {
                TabBar: {
                    name: string;
                    props: {
                        tabs: {
                            default: any;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            name: string;
            props: {
                currentName: {
                    default: string;
                    type: any;
                };
                editable: any;
                onTabClick: {
                    default: any;
                    type: any;
                };
                onTabRemove: {
                    default: any;
                    type: any;
                };
                panes: {
                    default: any;
                    type: any;
                };
                stretch: any;
                type: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace props {
        class addable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class closable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class editable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class stretch {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace activeName {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace beforeLeave {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace modelValue {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace tabPosition {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElTag {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class closable {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class disableTransitions {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class hit {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace color {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace effect {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): any;

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElTimePicker {
    const emits: string[];

    const name: string;

    function install(app: any): void;

    function setup(...args: any[]): void;

    namespace props {
        class endPlaceholder {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class startPlaceholder {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class unlinkPanels {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        const defaultTime: {
            type: any[];
        };

        const defaultValue: {
            type: any[];
        };

        const modelValue: {
            default: string;
            type: any[];
        };

        const name: {
            default: string;
            type: any[];
        };

        namespace arrowControl {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace cellClassName {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace clearIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace clearable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace disabled {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace disabledDate {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace disabledHours {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace disabledMinutes {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace disabledSeconds {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace editable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace format {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace isRange {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace placeholder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace popperClass {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace prefixIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace rangeSeparator {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace readonly {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace shortcuts {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): void;

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace validateEvent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElTimeSelect {
    const components: {
        ElOption: {
            componentName: string;
            install: any;
            name: string;
            props: {
                created: any;
                disabled: {
                    default: boolean;
                    type: any;
                };
                label: any[];
                value: {
                    required: boolean;
                    type: any[];
                };
            };
            render: any;
            setup: any;
        };
        ElSelect: {
            componentName: string;
            components: {
                ElInput: {
                    emits: string[];
                    inheritAttrs: boolean;
                    install: any;
                    name: string;
                    props: {
                        autocomplete: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        autosize: {
                            default: boolean;
                            type: any[];
                        };
                        clearable: {
                            default: boolean;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        form: {
                            default: string;
                            type: any;
                        };
                        label: {
                            type: any;
                        };
                        modelValue: {
                            default: string;
                            type: any[];
                        };
                        placeholder: {
                            type: any;
                        };
                        prefixIcon: {
                            default: string;
                            type: any;
                        };
                        readonly: {
                            default: boolean;
                            type: any;
                        };
                        resize: {
                            type: any;
                            validator: any;
                        };
                        showPassword: {
                            default: boolean;
                            type: any;
                        };
                        showWordLimit: {
                            default: boolean;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        suffixIcon: {
                            default: string;
                            type: any;
                        };
                        tabindex: {
                            type: any;
                        };
                        type: {
                            default: string;
                            type: any;
                        };
                        validateEvent: {
                            default: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElOption: {
                    componentName: string;
                    install: any;
                    name: string;
                    props: {
                        created: any;
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        label: any[];
                        value: {
                            required: boolean;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElPopper: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        appendToBody: {
                            default: boolean;
                            type: any;
                        };
                        arrowOffset: {
                            default: number;
                            type: any;
                        };
                        autoClose: {
                            default: number;
                            type: any;
                        };
                        boundariesPadding: {
                            default: number;
                            type: any;
                        };
                        class: {
                            default: string;
                            type: any;
                        };
                        content: {
                            default: string;
                            type: any;
                        };
                        cutoff: {
                            default: boolean;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        effect: {
                            default: string;
                            type: any;
                        };
                        enterable: {
                            default: boolean;
                            type: any;
                        };
                        gpuAcceleration: {
                            default: boolean;
                            type: any;
                        };
                        hideAfter: {
                            default: number;
                            type: any;
                        };
                        manualMode: {
                            default: boolean;
                            type: any;
                        };
                        offset: {
                            default: number;
                            type: any;
                        };
                        placement: {
                            default: string;
                            type: any;
                        };
                        popperClass: {
                            default: string;
                            type: any;
                        };
                        popperOptions: {
                            default: any;
                            type: any;
                        };
                        pure: {
                            default: boolean;
                            type: any;
                        };
                        showAfter: {
                            default: number;
                            type: any;
                        };
                        showArrow: {
                            default: boolean;
                            type: any;
                        };
                        stopPopperMouseEvent: {
                            default: boolean;
                            type: any;
                        };
                        strategy: {
                            default: string;
                            type: any;
                        };
                        style: any;
                        transition: {
                            default: string;
                            type: any;
                        };
                        trigger: {
                            default: string;
                            type: any[];
                        };
                        visible: {
                            default: any;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElScrollbar: {
                    components: {
                        Bar: {
                            name: string;
                            props: {
                                move: any;
                                size: any;
                                vertical: any;
                            };
                            render: any;
                            setup: any;
                        };
                    };
                    install: any;
                    name: string;
                    props: {
                        native: {
                            default: boolean;
                            type: any;
                        };
                        noresize: any;
                        tag: {
                            default: string;
                            type: any;
                        };
                        viewClass: {
                            default: string;
                            type: any[];
                        };
                        viewStyle: {
                            default: string;
                            type: any[];
                        };
                        wrapClass: {
                            default: string;
                            type: any[];
                        };
                        wrapStyle: {
                            default: string;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElSelectMenu: {
                    componentName: string;
                    name: string;
                    render: any;
                    setup: any;
                };
                ElTag: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        closable: any;
                        color: {
                            default: string;
                            type: any;
                        };
                        disableTransitions: any;
                        effect: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        hit: any;
                        size: {
                            type: any;
                            validator: any;
                        };
                        type: {
                            default: string;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            directives: {
                ClickOutside: {
                    beforeMount: any;
                    unmounted: any;
                    updated: any;
                };
            };
            emits: string[];
            install: any;
            name: string;
            props: {
                allowCreate: any;
                autocomplete: {
                    default: string;
                    type: any;
                };
                automaticDropdown: any;
                clearIcon: {
                    default: string;
                    type: any;
                };
                clearable: any;
                collapseTags: any;
                defaultFirstOption: any;
                disabled: any;
                filterMethod: any;
                filterable: any;
                id: any;
                loading: any;
                loadingText: any;
                modelValue: any[];
                multiple: any;
                multipleLimit: {
                    default: number;
                    type: any;
                };
                name: any;
                noDataText: any;
                noMatchText: any;
                placeholder: {
                    type: any;
                };
                popperAppendToBody: {
                    default: boolean;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                remote: any;
                remoteMethod: any;
                reserveKeyword: any;
                size: {
                    type: any;
                    validator: any;
                };
                valueKey: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const model: {
        event: string;
        prop: string;
    };

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class modelValue {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        namespace clearIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace clearable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace editable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace end {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace maxTime {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace minTime {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace placeholder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace prefixIcon {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace size {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(value: any): void;

        }

        namespace start {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace step {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElTimeline {
    const name: string;

    function install(app: any): void;

    function setup(...args: any[]): void;

}

export namespace ElTimelineItem {
    const name: string;

    const props: {
        color: {
            default: string;
            type: any;
        };
        hideTimestamp: {
            default: boolean;
            type: any;
        };
        icon: {
            default: string;
            type: any;
        };
        placement: {
            default: string;
            type: any;
        };
        size: {
            default: string;
            type: any;
        };
        timestamp: {
            default: string;
            type: any;
        };
        type: {
            default: string;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

export namespace ElTooltip {
    const components: {
        ElPopper: {
            emits: string[];
            install: any;
            name: string;
            props: {
                appendToBody: {
                    default: boolean;
                    type: any;
                };
                arrowOffset: {
                    default: number;
                    type: any;
                };
                autoClose: {
                    default: number;
                    type: any;
                };
                boundariesPadding: {
                    default: number;
                    type: any;
                };
                class: {
                    default: string;
                    type: any;
                };
                content: {
                    default: string;
                    type: any;
                };
                cutoff: {
                    default: boolean;
                    type: any;
                };
                disabled: {
                    default: boolean;
                    type: any;
                };
                effect: {
                    default: string;
                    type: any;
                };
                enterable: {
                    default: boolean;
                    type: any;
                };
                gpuAcceleration: {
                    default: boolean;
                    type: any;
                };
                hideAfter: {
                    default: number;
                    type: any;
                };
                manualMode: {
                    default: boolean;
                    type: any;
                };
                offset: {
                    default: number;
                    type: any;
                };
                placement: {
                    default: string;
                    type: any;
                };
                popperClass: {
                    default: string;
                    type: any;
                };
                popperOptions: {
                    default: any;
                    type: any;
                };
                pure: {
                    default: boolean;
                    type: any;
                };
                showAfter: {
                    default: number;
                    type: any;
                };
                showArrow: {
                    default: boolean;
                    type: any;
                };
                stopPopperMouseEvent: {
                    default: boolean;
                    type: any;
                };
                strategy: {
                    default: string;
                    type: any;
                };
                style: any;
                transition: {
                    default: string;
                    type: any;
                };
                trigger: {
                    default: string;
                    type: any[];
                };
                visible: {
                    default: any;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    const props: {
        class: {
            default: string;
            type: any;
        };
        content: {
            default: string;
            type: any;
        };
        disabled: {
            default: boolean;
            type: any;
        };
        effect: {
            default: string;
            type: any;
        };
        enterable: {
            default: boolean;
            type: any;
        };
        hideAfter: {
            default: number;
            type: any;
        };
        manual: {
            default: boolean;
            type: any;
        };
        modelValue: {
            default: any;
            type: any;
            validator: any;
        };
        offset: {
            default: number;
            type: any;
        };
        openDelay: {
            default: number;
            type: any;
        };
        placement: {
            default: string;
            type: any;
        };
        popperOptions: {
            default: any;
            type: any;
        };
        showAfter: {
            default: number;
            type: any;
        };
        stopPopperMouseEvent: {
            default: boolean;
            type: any;
        };
        transition: {
            default: string;
            type: any;
        };
        trigger: {
            default: any;
            type: any[];
        };
        visibleArrow: {
            default: boolean;
            type: any;
        };
    };

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

}

export namespace ElTransfer {
    const components: {
        ElButton: {
            emits: string[];
            install: any;
            name: string;
            props: {
                autofocus: any;
                circle: any;
                disabled: any;
                icon: {
                    default: string;
                    type: any;
                };
                loading: any;
                nativeType: {
                    default: string;
                    type: any;
                    validator: any;
                };
                plain: any;
                round: any;
                size: {
                    type: any;
                    validator: any;
                };
                type: {
                    default: string;
                    type: any;
                    validator: any;
                };
            };
            render: any;
            setup: any;
        };
        TransferPanel: {
            components: {
                ElCheckbox: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        border: any;
                        checked: any;
                        controls: {
                            default: any;
                            type: any;
                        };
                        disabled: any;
                        falseLabel: {
                            default: any;
                            type: any[];
                        };
                        id: {
                            default: any;
                            type: any;
                        };
                        indeterminate: any;
                        label: {
                            type: any[];
                        };
                        modelValue: {
                            default: any;
                            type: any[];
                        };
                        name: {
                            default: any;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        trueLabel: {
                            default: any;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElCheckboxGroup: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        disabled: any;
                        fill: {
                            default: any;
                            type: any;
                        };
                        max: {
                            default: any;
                            type: any;
                        };
                        min: {
                            default: any;
                            type: any;
                        };
                        modelValue: {
                            default: any;
                            type: any[];
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        textColor: {
                            default: any;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElInput: {
                    emits: string[];
                    inheritAttrs: boolean;
                    install: any;
                    name: string;
                    props: {
                        autocomplete: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        autosize: {
                            default: boolean;
                            type: any[];
                        };
                        clearable: {
                            default: boolean;
                            type: any;
                        };
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                        form: {
                            default: string;
                            type: any;
                        };
                        label: {
                            type: any;
                        };
                        modelValue: {
                            default: string;
                            type: any[];
                        };
                        placeholder: {
                            type: any;
                        };
                        prefixIcon: {
                            default: string;
                            type: any;
                        };
                        readonly: {
                            default: boolean;
                            type: any;
                        };
                        resize: {
                            type: any;
                            validator: any;
                        };
                        showPassword: {
                            default: boolean;
                            type: any;
                        };
                        showWordLimit: {
                            default: boolean;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        suffixIcon: {
                            default: string;
                            type: any;
                        };
                        tabindex: {
                            type: any;
                        };
                        type: {
                            default: string;
                            type: any;
                        };
                        validateEvent: {
                            default: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
                OptionContent: any;
            };
            emits: string[];
            name: string;
            props: {
                data: {
                    default: any;
                    type: any;
                };
                defaultChecked: any;
                filterMethod: any;
                filterable: any;
                format: any;
                optionRender: any;
                placeholder: any;
                props: any;
                title: any;
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class filterMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class renderContent {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        namespace buttonTexts {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace data {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace filterPlaceholder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace filterable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace format {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace leftDefaultChecked {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace modelValue {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace props {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace rightDefaultChecked {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace targetOrder {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            function validator(val: any): any;

        }

        namespace titles {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

    }

}

export namespace ElTree {
    const components: {
        ElTreeNode: {
            components: {
                ElCheckbox: {
                    emits: string[];
                    install: any;
                    name: string;
                    props: {
                        border: any;
                        checked: any;
                        controls: {
                            default: any;
                            type: any;
                        };
                        disabled: any;
                        falseLabel: {
                            default: any;
                            type: any[];
                        };
                        id: {
                            default: any;
                            type: any;
                        };
                        indeterminate: any;
                        label: {
                            type: any[];
                        };
                        modelValue: {
                            default: any;
                            type: any[];
                        };
                        name: {
                            default: any;
                            type: any;
                        };
                        size: {
                            type: any;
                            validator: any;
                        };
                        trueLabel: {
                            default: any;
                            type: any[];
                        };
                    };
                    render: any;
                    setup: any;
                };
                ElCollapseTransition: {
                    install: any;
                    name: string;
                    render: any;
                    setup: any;
                };
                NodeContent: {
                    name: string;
                    props: {
                        node: {
                            required: boolean;
                            type: any;
                        };
                        renderContent: any;
                    };
                    setup: any;
                };
            };
            emits: string[];
            name: string;
            props: {
                node: {
                    default: any;
                    type: any;
                };
                props: {
                    default: any;
                    type: any;
                };
                renderAfterExpand: any;
                renderContent: any;
                showCheckbox: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const emits: string[];

    const name: string;

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

    namespace props {
        class accordion {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class allowDrag {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class allowDrop {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class checkOnClickNode {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class checkStrictly {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class defaultCheckedKeys {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class defaultExpandAll {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class defaultExpandedKeys {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            copyWithin(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            entries(): any;

            // Native method; no parameter or return type inference available
            every(p0: any): any;

            // Native method; no parameter or return type inference available
            fill(p0: any): any;

            // Native method; no parameter or return type inference available
            filter(p0: any): any;

            // Native method; no parameter or return type inference available
            find(p0: any): any;

            // Native method; no parameter or return type inference available
            findIndex(p0: any): any;

            // Native method; no parameter or return type inference available
            flat(): any;

            // Native method; no parameter or return type inference available
            flatMap(p0: any): any;

            // Native method; no parameter or return type inference available
            forEach(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            join(p0: any): any;

            // Native method; no parameter or return type inference available
            keys(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            map(p0: any): any;

            // Native method; no parameter or return type inference available
            pop(): any;

            // Native method; no parameter or return type inference available
            push(p0: any): any;

            // Native method; no parameter or return type inference available
            reduce(p0: any): any;

            // Native method; no parameter or return type inference available
            reduceRight(p0: any): any;

            // Native method; no parameter or return type inference available
            reverse(): any;

            // Native method; no parameter or return type inference available
            shift(): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            some(p0: any): any;

            // Native method; no parameter or return type inference available
            sort(p0: any): any;

            // Native method; no parameter or return type inference available
            splice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            toLocaleString(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            unshift(p0: any): any;

            // Native method; no parameter or return type inference available
            values(): any;

            static from(p0: any): any;

            static isArray(p0: any): any;

            static of(): any;

        }

        class filterNodeMethod {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class highlightCurrent {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class iconClass {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class load {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        class nodeKey {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            big(): any;

            // Native method; no parameter or return type inference available
            blink(): any;

            // Native method; no parameter or return type inference available
            bold(): any;

            // Native method; no parameter or return type inference available
            charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            concat(p0: any): any;

            // Native method; no parameter or return type inference available
            endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            fixed(): any;

            // Native method; no parameter or return type inference available
            fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            includes(p0: any): any;

            // Native method; no parameter or return type inference available
            indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            italics(): any;

            // Native method; no parameter or return type inference available
            lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            link(p0: any): any;

            // Native method; no parameter or return type inference available
            localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            match(p0: any): any;

            // Native method; no parameter or return type inference available
            matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            normalize(): any;

            // Native method; no parameter or return type inference available
            padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            search(p0: any): any;

            // Native method; no parameter or return type inference available
            slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            small(): any;

            // Native method; no parameter or return type inference available
            split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            strike(): any;

            // Native method; no parameter or return type inference available
            sub(): any;

            // Native method; no parameter or return type inference available
            substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            sup(): any;

            // Native method; no parameter or return type inference available
            toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            toLowerCase(): any;

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            toUpperCase(): any;

            // Native method; no parameter or return type inference available
            trim(): any;

            // Native method; no parameter or return type inference available
            trimEnd(): any;

            // Native method; no parameter or return type inference available
            trimLeft(): any;

            // Native method; no parameter or return type inference available
            trimRight(): any;

            // Native method; no parameter or return type inference available
            trimStart(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

            static fromCharCode(p0: any): any;

            static fromCodePoint(p0: any): any;

            static raw(p0: any): any;

        }

        class renderContent {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            apply(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            bind(p0: any): any;

            // Native method; no parameter or return type inference available
            call(p0: any): any;

            // Native method; no parameter or return type inference available
            toString(): any;

        }

        const currentNodeKey: any[];

        namespace autoExpandParent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace checkDescendants {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace data {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace draggable {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace emptyText {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace expandOnClickNode {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace indent {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace lazy {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace props {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace renderAfterExpand {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace showCheckbox {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

    }

}

export namespace ElUpload {
    const components: {
        Upload: {
            components: {
                UploadDragger: {
                    emits: string[];
                    name: string;
                    props: {
                        disabled: {
                            default: boolean;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            props: {
                accept: {
                    default: string;
                    type: any;
                };
                action: {
                    required: boolean;
                    type: any;
                };
                autoUpload: {
                    default: boolean;
                    type: any;
                };
                beforeUpload: {
                    default: any;
                    type: any;
                };
                data: {
                    default: any;
                    type: any;
                };
                disabled: any;
                drag: {
                    default: boolean;
                    type: any;
                };
                fileList: {
                    default: any;
                    type: any;
                };
                headers: {
                    default: any;
                    type: any;
                };
                httpRequest: {
                    default: any;
                    type: any;
                };
                limit: {
                    default: any;
                    type: any;
                };
                listType: {
                    default: string;
                    type: any;
                };
                multiple: {
                    default: any;
                    type: any;
                };
                name: {
                    default: string;
                    type: any;
                };
                onError: {
                    default: any;
                    type: any;
                };
                onExceed: {
                    default: any;
                    type: any;
                };
                onPreview: {
                    default: any;
                    type: any;
                };
                onProgress: {
                    default: any;
                    type: any;
                };
                onRemove: {
                    default: any;
                    type: any;
                };
                onStart: {
                    default: any;
                    type: any;
                };
                onSuccess: {
                    default: any;
                    type: any;
                };
                type: {
                    default: string;
                    type: any;
                };
                withCredentials: {
                    default: boolean;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
        UploadList: {
            components: {
                ElProgress: {
                    install: any;
                    name: string;
                    props: {
                        color: {
                            default: string;
                            type: any[];
                        };
                        format: {
                            default: any;
                            type: any;
                        };
                        percentage: {
                            default: number;
                            required: boolean;
                            type: any;
                            validator: any;
                        };
                        showText: {
                            default: boolean;
                            type: any;
                        };
                        status: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        strokeLinecap: {
                            default: string;
                            type: any;
                        };
                        strokeWidth: {
                            default: number;
                            type: any;
                        };
                        textInside: {
                            default: boolean;
                            type: any;
                        };
                        type: {
                            default: string;
                            type: any;
                            validator: any;
                        };
                        width: {
                            default: number;
                            type: any;
                        };
                    };
                    render: any;
                    setup: any;
                };
            };
            emits: string[];
            name: string;
            props: {
                disabled: {
                    default: boolean;
                    type: any;
                };
                files: {
                    default: any;
                    type: any;
                };
                handlePreview: {
                    default: any;
                    type: any;
                };
                listType: {
                    default: string;
                    type: any;
                };
            };
            render: any;
            setup: any;
        };
    };

    const name: string;

    function install(app: any): void;

    function render(...args: any[]): void;

    function setup(...args: any[]): void;

    namespace props {
        class disabled {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        class withCredentials {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            toString(): any;

            // Native method; no parameter or return type inference available
            valueOf(): any;

        }

        namespace accept {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace action {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

            const required: boolean;

        }

        namespace autoUpload {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace beforeRemove {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace beforeUpload {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace data {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace drag {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace fileList {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                copyWithin(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                entries(): any;

                // Native method; no parameter or return type inference available
                every(p0: any): any;

                // Native method; no parameter or return type inference available
                fill(p0: any): any;

                // Native method; no parameter or return type inference available
                filter(p0: any): any;

                // Native method; no parameter or return type inference available
                find(p0: any): any;

                // Native method; no parameter or return type inference available
                findIndex(p0: any): any;

                // Native method; no parameter or return type inference available
                flat(): any;

                // Native method; no parameter or return type inference available
                flatMap(p0: any): any;

                // Native method; no parameter or return type inference available
                forEach(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                join(p0: any): any;

                // Native method; no parameter or return type inference available
                keys(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                map(p0: any): any;

                // Native method; no parameter or return type inference available
                pop(): any;

                // Native method; no parameter or return type inference available
                push(p0: any): any;

                // Native method; no parameter or return type inference available
                reduce(p0: any): any;

                // Native method; no parameter or return type inference available
                reduceRight(p0: any): any;

                // Native method; no parameter or return type inference available
                reverse(): any;

                // Native method; no parameter or return type inference available
                shift(): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                some(p0: any): any;

                // Native method; no parameter or return type inference available
                sort(p0: any): any;

                // Native method; no parameter or return type inference available
                splice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                unshift(p0: any): any;

                // Native method; no parameter or return type inference available
                values(): any;

                static from: any;

                static isArray: any;

                static of: any;

            }

        }

        namespace headers {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                hasOwnProperty(p0: any): any;

                // Native method; no parameter or return type inference available
                isPrototypeOf(p0: any): any;

                // Native method; no parameter or return type inference available
                propertyIsEnumerable(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static assign: any;

                static create: any;

                static defineProperties: any;

                static defineProperty: any;

                static entries: any;

                static freeze: any;

                static fromEntries: any;

                static getOwnPropertyDescriptor: any;

                static getOwnPropertyDescriptors: any;

                static getOwnPropertyNames: any;

                static getOwnPropertySymbols: any;

                static getPrototypeOf: any;

                static is: any;

                static isExtensible: any;

                static isFrozen: any;

                static isSealed: any;

                static keys: any;

                static preventExtensions: any;

                static seal: any;

                static setPrototypeOf: any;

                static values: any;

            }

        }

        namespace httpRequest {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace limit {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toExponential(p0: any): any;

                // Native method; no parameter or return type inference available
                toFixed(p0: any): any;

                // Native method; no parameter or return type inference available
                toLocaleString(): any;

                // Native method; no parameter or return type inference available
                toPrecision(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(p0: any): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static EPSILON: any;

                static MAX_SAFE_INTEGER: any;

                static MAX_VALUE: any;

                static MIN_SAFE_INTEGER: any;

                static MIN_VALUE: any;

                static NEGATIVE_INFINITY: any;

                static NaN: any;

                static POSITIVE_INFINITY: any;

                static isFinite: any;

                static isInteger: any;

                static isNaN: any;

                static isSafeInteger: any;

                static parseFloat: any;

                static parseInt: any;

            }

        }

        namespace listType {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace multiple {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace name {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

        namespace onChange {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace onError {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace onExceed {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace onPreview {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace onProgress {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace onRemove {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace onSuccess {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                bind(p0: any): any;

                // Native method; no parameter or return type inference available
                call(p0: any): any;

                // Native method; no parameter or return type inference available
                toString(): any;

            }

        }

        namespace showFileList {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

            }

        }

        namespace type {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                big(): any;

                // Native method; no parameter or return type inference available
                blink(): any;

                // Native method; no parameter or return type inference available
                bold(): any;

                // Native method; no parameter or return type inference available
                charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                concat(p0: any): any;

                // Native method; no parameter or return type inference available
                endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                fixed(): any;

                // Native method; no parameter or return type inference available
                fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                includes(p0: any): any;

                // Native method; no parameter or return type inference available
                indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                italics(): any;

                // Native method; no parameter or return type inference available
                lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                link(p0: any): any;

                // Native method; no parameter or return type inference available
                localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                match(p0: any): any;

                // Native method; no parameter or return type inference available
                matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                normalize(): any;

                // Native method; no parameter or return type inference available
                padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                search(p0: any): any;

                // Native method; no parameter or return type inference available
                slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                small(): any;

                // Native method; no parameter or return type inference available
                split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                strike(): any;

                // Native method; no parameter or return type inference available
                sub(): any;

                // Native method; no parameter or return type inference available
                substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                sup(): any;

                // Native method; no parameter or return type inference available
                toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                toLowerCase(): any;

                // Native method; no parameter or return type inference available
                toString(): any;

                // Native method; no parameter or return type inference available
                toUpperCase(): any;

                // Native method; no parameter or return type inference available
                trim(): any;

                // Native method; no parameter or return type inference available
                trimEnd(): any;

                // Native method; no parameter or return type inference available
                trimLeft(): any;

                // Native method; no parameter or return type inference available
                trimRight(): any;

                // Native method; no parameter or return type inference available
                trimStart(): any;

                // Native method; no parameter or return type inference available
                valueOf(): any;

                static fromCharCode: any;

                static fromCodePoint: any;

                static raw: any;

            }

        }

    }

}

export namespace ElVirtualList {
    const components: {
        ElVirtualListItem: {
            name: string;
            props: {
            };
            render: any;
            setup: any;
        };
    };

    const name: string;

    const props: {
        data: {
            required: boolean;
            type: any;
        };
        direction: {
            default: string;
            type: any;
        };
        itemSize: {
            required: boolean;
            type: any;
        };
        poolSize: {
            default: number;
            type: any;
        };
        windowSize: {
            required: boolean;
            type: any;
        };
    };

    function install(app: any): void;

    function render(_ctx: any, _cache: any, $props: any, $setup: any, $data: any, $options: any): any;

    function setup(...args: any[]): void;

}

